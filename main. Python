import cv2
import numpy as np
import mediapipe as mp
from collections import deque
import datetime

# Initialize point storage for colors
bpoints = [deque(maxlen=1024)]
gpoints = [deque(maxlen=1024)]
rpoints = [deque(maxlen=1024)]
ypoints = [deque(maxlen=1024)]

# Define colors
colors = [(255, 0, 0), (0, 255, 0), (0, 0, 255), (0, 255, 255)]
colorIndex = 0
eraser_radius = 30  # Initial eraser radius

# Canvas setup
paintWindow = np.zeros((471, 636, 3)) + 255  # Completely white canvas

cv2.namedWindow('Paint', cv2.WINDOW_AUTOSIZE)

# Mediapipe initialization
mpHands = mp.solutions.hands
hands = mpHands.Hands(max_num_hands=1, min_detection_confidence=0.7)
mpDraw = mp.solutions.drawing_utils

# Webcam initialization
cap = cv2.VideoCapture(0)
ret = True

previous_thumb = None
previous_index_finger = None

def save_painting():
    """Save the painting to a file with a unique filename."""
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"painting_{timestamp}.png"
    cv2.imwrite(filename, paintWindow)
    print(f"Saved painting as {filename}")

# Initialize the saved flag
saved = False

while ret:
    # Read each frame from the webcam
    ret, frame = cap.read()
    if not ret:
        break

    frame = cv2.flip(frame, 1)
    framergb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

    # Define common dimensions for the blocks
    x_start = 130
    block_width = 72  # Width of each color block
    block_height = 64  # Height of each color block
    block_spacing = 10  # Spacing between blocks

    # Draw color selection rectangles on the frame
    frame = cv2.rectangle(frame, (40, 1), (112, 65), (0, 0, 0), 2)  # Clear Button
    frame = cv2.rectangle(frame, (x_start, 1), (x_start + block_width, block_height), (255, 0, 0), 2)  # Blue
    frame = cv2.rectangle(frame, (x_start + block_width + block_spacing, 1), 
                          (x_start + 2 * block_width + block_spacing, block_height), (0, 255, 0), 2)  # Green
    frame = cv2.rectangle(frame, (x_start + 2 * (block_width + block_spacing), 1), 
                          (x_start + 3 * block_width + 2 * block_spacing, block_height), (0, 0, 255), 2)  # Red
    frame = cv2.rectangle(frame, (x_start + 3 * (block_width + block_spacing), 1), 
                          (x_start + 4 * block_width + 3 * block_spacing, block_height), (0, 255, 255), 2)  # Yellow
    frame = cv2.rectangle(frame, (x_start + 4 * (block_width + block_spacing), 1), 
                          (x_start + 5 * block_width + 4 * block_spacing, block_height), (255, 255, 255), 2)  # Eraser
    frame = cv2.rectangle(frame, (x_start + 5 * (block_width + block_spacing), 1), 
                          (x_start + 6 * block_width + 5 * block_spacing, block_height), (0, 0, 0), 2)  # Save Button

    # Add text inside the blocks
    font = cv2.FONT_HERSHEY_SIMPLEX
    font_scale = 0.5
    font_color = (0, 0, 0)
    thickness = 1
    text_y_position = 40

    cv2.putText(frame, 'Clear', (60, text_y_position), font, font_scale, font_color, thickness)
    cv2.putText(frame, 'Blue', (x_start + 22, text_y_position), font, font_scale, font_color, thickness)
    cv2.putText(frame, 'Green', (x_start + block_width + block_spacing + 10, text_y_position), font, font_scale, font_color, thickness)
    cv2.putText(frame, 'Red', (x_start + 2 * (block_width + block_spacing) + 22, text_y_position), font, font_scale, font_color, thickness)
    cv2.putText(frame, 'Yellow', (x_start + 3 * (block_width + block_spacing) + 10, text_y_position), font, font_scale, font_color, thickness)
    cv2.putText(frame, 'Eraser', (x_start + 4 * (block_width + block_spacing) + 10, text_y_position), font, font_scale, font_color, thickness)
    cv2.putText(frame, 'Save', (x_start + 5 * (block_width + block_spacing) + 20, text_y_position), font, font_scale, font_color, thickness)

    # Hand detection
    result = hands.process(framergb)

    if result.multi_hand_landmarks:
        landmarks = []
        for handslms in result.multi_hand_landmarks:
            for lm in handslms.landmark:
                lmx = int(lm.x * 640)
                lmy = int(lm.y * 480)
                landmarks.append([lmx, lmy])

            mpDraw.draw_landmarks(frame, handslms, mpHands.HAND_CONNECTIONS)

        fore_finger = (landmarks[8][0], landmarks[8][1])
        thumb = (landmarks[4][0], landmarks[4][1])
        center = fore_finger

        if (thumb[1] - center[1] < 30):
            bpoints.append(deque(maxlen=512))
            gpoints.append(deque(maxlen=512))
            rpoints.append(deque(maxlen=512))
            ypoints.append(deque(maxlen=512))
            saved = False  # Reset saved flag when starting a new drawing

        elif center[1] <= 65:
            if 40 <= center[0] <= 112:  # Clear Button
                bpoints = [deque(maxlen=512)]
                gpoints = [deque(maxlen=512)]
                rpoints = [deque(maxlen=512)]
                ypoints = [deque(maxlen=512)]
                paintWindow[:, :] = 255  # Reset paint window to white
                saved = False  # Reset saved flag
            elif x_start <= center[0] <= x_start + block_width:
                colorIndex = 0  # Blue
            elif x_start + block_width + block_spacing <= center[0] <= x_start + 2 * block_width + block_spacing:
                colorIndex = 1  # Green
            elif x_start + 2 * (block_width + block_spacing) <= center[0] <= x_start + 3 * block_width + 2 * block_spacing:
                colorIndex = 2  # Red
            elif x_start + 3 * (block_width + block_spacing) <= center[0] <= x_start + 4 * block_width + 3 * block_spacing:
                colorIndex = 3  # Yellow
            elif x_start + 4 * (block_width + block_spacing) <= center[0] <= x_start + 5 * block_width + 4 * block_spacing:  # Eraser
                colorIndex = -1  # Eraser mode
            elif x_start + 5 * (block_width + block_spacing) <= center[0] <= x_start + 6 * block_width + 5 * block_spacing:  # Save Button
                if not saved:  # Only save if not already saved
                    save_painting()  # Save painting
                    saved = True  # Set saved flag to true
        else:
            if colorIndex == 0:
                bpoints[-1].appendleft(center)
            elif colorIndex == 1:
                gpoints[-1].appendleft(center)
            elif colorIndex == 2:
                rpoints[-1].appendleft(center)
            elif colorIndex == 3:
                ypoints[-1].appendleft(center)
            elif colorIndex == -1:  # Eraser mode
                # Visualize erasing area
                cv2.circle(frame, center, eraser_radius, (255, 0, 0), 1)  # Show erasing area in red

                # Remove painted lines in the selected area
                for i, points_group in enumerate([bpoints, gpoints, rpoints, ypoints]):
                    for j, points in enumerate(points_group):
                        for k in range(len(points)):
                            if points[k] is not None:
                                if np.linalg.norm(np.array(points[k]) - np.array(center)) < eraser_radius:
                                    points[k] = None  # Mark the point as None to "erase"

                # Erase from the paint window
                cv2.circle(paintWindow, center, eraser_radius, (255, 255, 255), -1)

        # Check the distance between thumb and forefinger for adjusting eraser size
        if previous_thumb is not None and previous_index_finger is not None:
            previous_distance = np.linalg.norm(np.array(previous_thumb) - np.array(previous_index_finger))
            current_distance = np.linalg.norm(np.array(thumb) - np.array(fore_finger))
            if current_distance > previous_distance:
                eraser_radius += 1  # Increase eraser radius
            elif current_distance < previous_distance:
                eraser_radius = max(10, eraser_radius - 1)  # Decrease eraser radius

        previous_thumb = thumb
        previous_index_finger = fore_finger

    # Draw lines of all the colors on the canvas and frame
    points = [bpoints, gpoints, rpoints, ypoints]
    for i in range(len(points)):
        for j in range(len(points[i])):
            for k in range(1, len(points[i][j])):
                if points[i][j][k - 1] is None or points[i][j][k] is None:
                    continue
                cv2.line(frame, points[i][j][k - 1], points[i][j][k], colors[i], 2)
                cv2.line(paintWindow, points[i][j][k - 1], points[i][j][k], colors[i], 2)

    cv2.imshow("Output", frame)
    cv2.imshow("Paint", paintWindow)

    if cv2.waitKey(1) == ord('q'):
        break

# Release the webcam and destroy all active windows
cap.release()
cv2.destroyAllWindows()
